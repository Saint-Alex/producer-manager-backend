name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20.x'
  POSTGRES_VERSION: '15'

jobs:
  # Job de qualidade de código
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint:check

      - name: Check formatting
        run: npm run format:check

      - name: TypeScript type check
        run: npx tsc --noEmit

  # Job de testes
  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: code-quality

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: producer_manager_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:cov
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_USERNAME: test
          DATABASE_PASSWORD: test
          DATABASE_NAME: producer_manager_test
          NODE_ENV: test
          JWT_SECRET: test-secret

      - name: Run e2e tests
        run: npm run test:e2e
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_USERNAME: test
          DATABASE_PASSWORD: test
          DATABASE_NAME: producer_manager_test
          NODE_ENV: test
          JWT_SECRET: test-secret

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job de build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [code-quality, tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  # Job de análise de segurança
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "Running security audit..."
          npm audit --audit-level=high || echo "Security audit completed with warnings"
          npm audit --json > security-audit.json || true
        continue-on-error: true
        
      - name: Upload security audit report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: security-audit.json
          retention-days: 30
        if: always()

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
        continue-on-error: true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

  # Job de deploy (apenas para branch main)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/producer-manager-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/producer-manager-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Aqui você pode adicionar steps para deploy em cloud providers
      # Como AWS, Azure, GCP, Heroku, etc.

  # Job de notificação
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: Notify on success
        if: needs.deploy.result == 'success'
        run: |
          echo "✅ Deploy realizado com sucesso!"
          # Aqui você pode adicionar notificações para Slack, Discord, etc.

      - name: Notify on failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deploy falhou!"
          # Aqui você pode adicionar notificações para Slack, Discord, etc.
